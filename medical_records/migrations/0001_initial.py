# Generated by Django 4.2.7 on 2025-09-21 16:48

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('patients', '0001_initial'),
        ('appointments', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('doctors', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='MedicalRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_id', models.CharField(help_text='Unique medical record identifier', max_length=20, unique=True)),
                ('record_type', models.CharField(choices=[('consultation', 'Consultation'), ('diagnosis', 'Diagnosis'), ('treatment', 'Treatment'), ('surgery', 'Surgery'), ('lab_test', 'Lab Test'), ('imaging', 'Imaging'), ('vaccination', 'Vaccination'), ('emergency', 'Emergency Visit')], default='consultation', max_length=20)),
                ('visit_date', models.DateTimeField()),
                ('chief_complaint', models.TextField(help_text='Primary reason for visit')),
                ('history_of_present_illness', models.TextField(blank=True)),
                ('vital_signs_data', models.JSONField(blank=True, default=dict, help_text='Store vital signs as JSON')),
                ('physical_examination', models.TextField(blank=True)),
                ('assessment', models.TextField(blank=True, help_text="Doctor's assessment")),
                ('diagnosis', models.TextField(blank=True, help_text='Primary and secondary diagnoses')),
                ('treatment_plan', models.TextField(blank=True)),
                ('follow_up_instructions', models.TextField(blank=True)),
                ('next_visit_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_private', models.BooleanField(default=False)),
                ('appointment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='medical_records', to='appointments.appointment')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_medical_records', to=settings.AUTH_USER_MODEL)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_records_created', to='doctors.doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_records', to='patients.patient')),
            ],
            options={
                'ordering': ['-visit_date'],
            },
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prescription_id', models.CharField(max_length=20, unique=True)),
                ('prescribed_date', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('discontinued', 'Discontinued'), ('cancelled', 'Cancelled')], default='active', max_length=20)),
                ('notes', models.TextField(blank=True, help_text='General prescription notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='doctors.doctor')),
                ('medical_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='medical_records.medicalrecord')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='patients.patient')),
            ],
            options={
                'ordering': ['-prescribed_date'],
            },
        ),
        migrations.CreateModel(
            name='VitalSigns',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temperature', models.FloatField(blank=True, help_text='Temperature in Celsius', null=True)),
                ('blood_pressure_systolic', models.PositiveIntegerField(blank=True, null=True)),
                ('blood_pressure_diastolic', models.PositiveIntegerField(blank=True, null=True)),
                ('heart_rate', models.PositiveIntegerField(blank=True, help_text='Beats per minute', null=True)),
                ('respiratory_rate', models.PositiveIntegerField(blank=True, help_text='Breaths per minute', null=True)),
                ('oxygen_saturation', models.PositiveIntegerField(blank=True, help_text='SpO2 percentage', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('weight', models.FloatField(blank=True, help_text='Weight in kg', null=True)),
                ('height', models.FloatField(blank=True, help_text='Height in cm', null=True)),
                ('pain_scale', models.PositiveIntegerField(blank=True, help_text='Pain scale 0-10', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('measured_at', models.DateTimeField()),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('measured_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('medical_record', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vital_signs', to='medical_records.medicalrecord')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vital_signs', to='patients.patient')),
            ],
            options={
                'verbose_name_plural': 'Vital Signs',
                'ordering': ['-measured_at'],
            },
        ),
        migrations.CreateModel(
            name='PrescriptionMedication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medication_name', models.CharField(max_length=200)),
                ('generic_name', models.CharField(blank=True, max_length=200)),
                ('strength', models.CharField(help_text='e.g., 500mg, 5ml', max_length=50)),
                ('dosage', models.CharField(help_text='e.g., 1 tablet, 2 capsules', max_length=100)),
                ('frequency', models.CharField(choices=[('once_daily', 'Once Daily'), ('twice_daily', 'Twice Daily'), ('three_times_daily', 'Three Times Daily'), ('four_times_daily', 'Four Times Daily'), ('as_needed', 'As Needed'), ('before_meals', 'Before Meals'), ('after_meals', 'After Meals'), ('at_bedtime', 'At Bedtime'), ('every_other_day', 'Every Other Day'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], max_length=20)),
                ('route', models.CharField(choices=[('oral', 'Oral'), ('topical', 'Topical'), ('injection', 'Injection'), ('inhaled', 'Inhaled'), ('sublingual', 'Sublingual'), ('rectal', 'Rectal'), ('eye_drops', 'Eye Drops'), ('ear_drops', 'Ear Drops')], default='oral', max_length=20)),
                ('duration', models.CharField(help_text='e.g., 7 days, 2 weeks', max_length=100)),
                ('quantity', models.PositiveIntegerField(help_text='Total quantity to dispense')),
                ('refills', models.PositiveIntegerField(default=0, help_text='Number of refills allowed')),
                ('instructions', models.TextField(blank=True, help_text='Special instructions')),
                ('side_effects', models.TextField(blank=True, help_text='Possible side effects')),
                ('is_active', models.BooleanField(default=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('prescription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medications', to='medical_records.prescription')),
            ],
        ),
        migrations.CreateModel(
            name='LabTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_id', models.CharField(max_length=20, unique=True)),
                ('test_name', models.CharField(max_length=200)),
                ('test_category', models.CharField(blank=True, max_length=100)),
                ('test_code', models.CharField(blank=True, max_length=20)),
                ('priority', models.CharField(choices=[('routine', 'Routine'), ('urgent', 'Urgent'), ('stat', 'STAT')], default='routine', max_length=10)),
                ('status', models.CharField(choices=[('ordered', 'Ordered'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='ordered', max_length=20)),
                ('ordered_date', models.DateTimeField(auto_now_add=True)),
                ('sample_collected_date', models.DateTimeField(blank=True, null=True)),
                ('result_date', models.DateTimeField(blank=True, null=True)),
                ('result_value', models.TextField(blank=True)),
                ('reference_range', models.CharField(blank=True, max_length=200)),
                ('unit', models.CharField(blank=True, max_length=50)),
                ('is_abnormal', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True)),
                ('interpretation', models.TextField(blank=True)),
                ('result_file', models.FileField(blank=True, null=True, upload_to='uploads/lab_results/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ordered_lab_tests', to='doctors.doctor')),
                ('medical_record', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lab_tests', to='medical_records.medicalrecord')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lab_tests', to='patients.patient')),
            ],
            options={
                'ordering': ['-ordered_date'],
            },
        ),
        migrations.CreateModel(
            name='Allergy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allergen', models.CharField(help_text='Name of the allergen', max_length=200)),
                ('allergy_type', models.CharField(choices=[('drug', 'Drug/Medication'), ('food', 'Food'), ('environmental', 'Environmental'), ('contact', 'Contact'), ('other', 'Other')], default='other', max_length=20)),
                ('severity', models.CharField(choices=[('mild', 'Mild'), ('moderate', 'Moderate'), ('severe', 'Severe'), ('life_threatening', 'Life Threatening')], default='mild', max_length=20)),
                ('reaction', models.TextField(help_text='Description of allergic reaction')),
                ('onset_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allergies', to='patients.patient')),
                ('recorded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Allergies',
                'ordering': ['-severity', 'allergen'],
            },
        ),
    ]
