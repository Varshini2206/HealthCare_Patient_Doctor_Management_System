name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-and-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Build static site from Django templates
        run: |
          # Create output directory
          mkdir -p docs
          
          # Copy static files if they exist
          if [ -d "static" ]; then
            cp -r static docs/
          else
            echo "Static directory not found, creating empty one"
            mkdir -p docs/static
          fi
          
          # Copy media files if they exist
          if [ -d "media" ]; then
            cp -r media docs/
          fi
          
          # Copy demo images if they exist
          if [ -d "HealthCare Patient and Doctor Demo" ]; then
            cp -r "HealthCare Patient and Doctor Demo" docs/
          fi
          
          # List current directory contents for debugging
          echo "Current directory contents:"
          ls -la
          echo "Templates directory contents:"
          ls -la templates/ || echo "Templates directory not found"
          
          # Convert Django templates to static HTML with proper template inheritance
          python3 << 'EOF'
          import os
          import re
          import shutil
          from pathlib import Path
          
          def load_base_template():
              """Load and process the base template"""
              base_path = 'templates/base.html'
              if os.path.exists(base_path):
                  with open(base_path, 'r', encoding='utf-8') as f:
                      base_content = f.read()
                  
                  # Process base template
                  base_content = re.sub(r'{%\s*load\s+[^%]+%}', '', base_content)
                  base_content = re.sub(r'{%\s*static\s+[\'"]([^\'"]+)[\'"]\s*%}', r'static/\1', base_content)
                  
                  # Replace block content placeholders
                  base_content = re.sub(r'{%\s*block\s+title\s*%}[^{]*{%\s*endblock\s*%}', 'VB Healthcare Management System', base_content)
                  base_content = re.sub(r'{%\s*block\s+content\s*%}[^{]*{%\s*endblock\s*%}', '<!-- CONTENT_PLACEHOLDER -->', base_content)
                  base_content = re.sub(r'{%\s*block\s+extra_css\s*%}[^{]*{%\s*endblock\s*%}', '', base_content)
                  base_content = re.sub(r'{%\s*block\s+extra_js\s*%}[^{]*{%\s*endblock\s*%}', '', base_content)
                  
                  # Clean up any remaining template syntax
                  base_content = re.sub(r'{%[^%]*%}', '', base_content)
                  base_content = re.sub(r'{{[^}]*user[^}]*}}', 'Demo User', base_content)
                  base_content = re.sub(r'{{[^}]*}}', '', base_content)
                  
                  return base_content
              return None
          
          def convert_template_with_inheritance(template_path, output_path, base_template):
              """Convert Django template handling inheritance properly"""
              try:
                  with open(template_path, 'r', encoding='utf-8') as f:
                      content = f.read()
                  
                  # Check if this template extends base
                  if '{% extends' in content:
                      # Extract all blocks from the template
                      title_match = re.search(r'{%\s*block\s+title\s*%}(.*?){%\s*endblock\s*%}', content, re.DOTALL)
                      content_match = re.search(r'{%\s*block\s+content\s*%}(.*?){%\s*endblock\s*%}', content, re.DOTALL)
                      extra_css_match = re.search(r'{%\s*block\s+extra_css\s*%}(.*?){%\s*endblock\s*%}', content, re.DOTALL)
                      extra_js_match = re.search(r'{%\s*block\s+extra_js\s*%}(.*?){%\s*endblock\s*%}', content, re.DOTALL)
                      
                      title = title_match.group(1).strip() if title_match else 'VB Healthcare Management System'
                      page_content = content_match.group(1).strip() if content_match else ''
                      extra_css = extra_css_match.group(1).strip() if extra_css_match else ''
                      extra_js = extra_js_match.group(1).strip() if extra_js_match else ''
                      
                      # Start with base template
                      final_content = base_template
                      
                      # Replace title
                      final_content = re.sub(r'{%\s*block\s+title\s*%}.*?{%\s*endblock\s*%}', title, final_content, flags=re.DOTALL)
                      
                      # Add extra CSS before closing head tag
                      if extra_css:
                          final_content = final_content.replace('</head>', f'<style>{extra_css}</style>\n</head>')
                      
                      # Replace content placeholder
                      final_content = final_content.replace('<!-- CONTENT_PLACEHOLDER -->', page_content)
                      
                      # Add extra JS before closing body tag
                      if extra_js:
                          final_content = final_content.replace('</body>', f'<script>{extra_js}</script>\n</body>')
                  else:
                      # Standalone template - wrap in base structure if needed
                      if not content.strip().startswith('<!DOCTYPE html>'):
                          final_content = base_template.replace('<!-- CONTENT_PLACEHOLDER -->', content)
                      else:
                          final_content = content
                  
                  # Process the final content - clean up Django syntax
                  final_content = re.sub(r'{%\s*load\s+[^%]+%}', '', final_content)
                  final_content = re.sub(r'{%\s*extends\s+[^%]+%}', '', final_content)
                  
                  # Replace static file references
                  final_content = re.sub(r'{%\s*static\s+[\'"]([^\'"]+)[\'"]\s*%}', r'static/\1', final_content)
                  
                  # Handle remaining blocks that weren't processed
                  final_content = re.sub(r'{%\s*block\s+[^%]+%}', '', final_content)
                  final_content = re.sub(r'{%\s*endblock\s*%}', '', final_content)
                  
                  # Replace URL patterns with static links
                  url_replacements = {
                      r'{%\s*url\s+[\'"]home[\'"]\s*%}': 'index.html',
                      r'{%\s*url\s+[\'"]about[\'"]\s*%}': 'about.html',
                      r'{%\s*url\s+[\'"]privacy_policy[\'"]\s*%}': 'privacy_policy.html',
                      r'{%\s*url\s+[\'"]terms_of_service[\'"]\s*%}': 'terms_of_service.html',
                      r'{%\s*url\s+[\'"]accounts:login[\'"]\s*%}': 'accounts-login.html',
                      r'{%\s*url\s+[\'"]accounts:register[\'"]\s*%}': 'accounts-register.html',
                      r'{%\s*url\s+[\'"]accounts:profile[\'"]\s*%}': 'accounts-profile.html',
                      r'{%\s*url\s+[\'"]accounts:profile_update[\'"]\s*%}': 'accounts-profile_update.html',
                      r'{%\s*url\s+[\'"]patients:dashboard[\'"]\s*%}': 'patients-dashboard.html',
                      r'{%\s*url\s+[\'"]patients:appointments[\'"]\s*%}': 'patients-appointments.html',
                      r'{%\s*url\s+[\'"]patients:medical_records[\'"]\s*%}': 'patients-medical_records.html',
                      r'{%\s*url\s+[\'"]doctors:dashboard[\'"]\s*%}': 'doctors-dashboard.html',
                      r'{%\s*url\s+[\'"]doctors:appointments[\'"]\s*%}': 'doctors-appointments.html',
                      r'{%\s*url\s+[\'"]doctors:patients[\'"]\s*%}': 'doctors-patients.html',
                      r'{%\s*url\s+[\'"]appointments:book[\'"]\s*%}': 'appointments-book.html',
                      r'{%\s*url\s+[\'"]appointments:list[\'"]\s*%}': 'appointments-list.html',
                      r'{%\s*url\s+[\'"]medical_records:list[\'"]\s*%}': 'medical_records-list.html',
                  }
                  
                  for pattern, replacement in url_replacements.items():
                      final_content = re.sub(pattern, replacement, final_content)
                  
                  # Handle conditional statements and loops
                  final_content = re.sub(r'{%\s*csrf_token\s*%}', '', final_content)
                  
                  # Handle if statements - keep content inside
                  final_content = re.sub(r'{%\s*if\s+user\.is_authenticated\s*%}', '<!-- User authenticated -->', final_content)
                  final_content = re.sub(r'{%\s*if\s+[^%]+%}', '<!-- Condition -->', final_content)
                  final_content = re.sub(r'{%\s*else\s*%}', '<!-- Else -->', final_content)
                  final_content = re.sub(r'{%\s*endif\s*%}', '<!-- End condition -->', final_content)
                  
                  # Handle loops - keep content and add sample data
                  final_content = re.sub(r'{%\s*for\s+appointment\s+in\s+appointments\s*%}', 
                                        '<!-- Sample appointments -->', final_content)
                  final_content = re.sub(r'{%\s*for\s+patient\s+in\s+patients\s*%}', 
                                        '<!-- Sample patients -->', final_content)
                  final_content = re.sub(r'{%\s*for\s+[^%]+%}', '<!-- Sample data loop -->', final_content)
                  final_content = re.sub(r'{%\s*empty\s*%}', '<!-- No data message -->', final_content)
                  final_content = re.sub(r'{%\s*endfor\s*%}', '<!-- End loop -->', final_content)
                  
                  # Remove comments and other Django syntax
                  final_content = re.sub(r'{%\s*comment\s*%}.*?{%\s*endcomment\s*%}', '', final_content, flags=re.DOTALL)
                  final_content = re.sub(r'{%[^%]*%}', '', final_content)  # Remove any remaining Django tags
                  
                  # Replace template variables with realistic demo data
                  final_content = re.sub(r'{{[^}]*user\.first_name[^}]*}}', 'John', final_content)
                  final_content = re.sub(r'{{[^}]*user\.last_name[^}]*}}', 'Patient', final_content)
                  final_content = re.sub(r'{{[^}]*user\.email[^}]*}}', 'john.patient@demo.com', final_content)
                  final_content = re.sub(r'{{[^}]*user\.username[^}]*}}', 'johnpatient', final_content)
                  final_content = re.sub(r'{{[^}]*user\.get_full_name[^}]*}}', 'John Patient', final_content)
                  final_content = re.sub(r'{{[^}]*user\.profile\.phone[^}]*}}', '+1 (555) 123-4567', final_content)
                  final_content = re.sub(r'{{[^}]*user[^}]*}}', 'John Patient', final_content)
                  
                  # Patient related variables
                  final_content = re.sub(r'{{[^}]*patient\.name[^}]*}}', 'John Patient', final_content)
                  final_content = re.sub(r'{{[^}]*patient\.first_name[^}]*}}', 'John', final_content)
                  final_content = re.sub(r'{{[^}]*patient\.phone[^}]*}}', '+1 (555) 123-4567', final_content)
                  final_content = re.sub(r'{{[^}]*patient\.email[^}]*}}', 'john.patient@demo.com', final_content)
                  
                  # Doctor related variables
                  final_content = re.sub(r'{{[^}]*doctor\.name[^}]*}}', 'Dr. Sarah Smith', final_content)
                  final_content = re.sub(r'{{[^}]*doctor\.first_name[^}]*}}', 'Dr. Sarah', final_content)
                  final_content = re.sub(r'{{[^}]*doctor\.specialization[^}]*}}', 'Cardiology', final_content)
                  
                  # Appointment related variables
                  final_content = re.sub(r'{{[^}]*appointment\.date[^}]*}}', '2025-09-25', final_content)
                  final_content = re.sub(r'{{[^}]*appointment\.time[^}]*}}', '10:00 AM', final_content)
                  final_content = re.sub(r'{{[^}]*appointment\.status[^}]*}}', 'Confirmed', final_content)
                  final_content = re.sub(r'{{[^}]*appointment\.type[^}]*}}', 'Consultation', final_content)
                  
                  # Statistics and counts
                  final_content = re.sub(r'{{[^}]*total_appointments[^}]*}}', '12', final_content)
                  final_content = re.sub(r'{{[^}]*pending_appointments[^}]*}}', '3', final_content)
                  final_content = re.sub(r'{{[^}]*completed_appointments[^}]*}}', '8', final_content)
                  final_content = re.sub(r'{{[^}]*upcoming_appointments[^}]*}}', '2', final_content)
                  final_content = re.sub(r'{{[^}]*total_patients[^}]*}}', '25', final_content)
                  final_content = re.sub(r'{{[^}]*today_appointments[^}]*}}', '4', final_content)
                  
                  # General variables
                  final_content = re.sub(r'{{[^}]*phone[^}]*}}', '+1 (555) 123-4567', final_content)
                  final_content = re.sub(r'{{[^}]*email[^}]*}}', 'demo@vbhealthcare.com', final_content)
                  final_content = re.sub(r'{{[^}]*date[^}]*}}', '2025-09-24', final_content)
                  final_content = re.sub(r'{{[^}]*count[^}]*}}', '5', final_content)
                  final_content = re.sub(r'{{[^}]*title[^}]*}}', 'Healthcare Management', final_content)
                  
                  # Remove any remaining template variables
                  final_content = re.sub(r'{{[^}]*}}', '', final_content)
                  
                  # Create output directory
                  os.makedirs(os.path.dirname(output_path), exist_ok=True)
                  
                  # Write the final content
                  with open(output_path, 'w', encoding='utf-8') as f:
                      f.write(final_content)
                  
                  print(f"✓ Converted: {template_path} -> {output_path}")
                  return True
                  
              except Exception as e:
                  print(f"✗ Error converting {template_path}: {e}")
                  return False
          
          # Load base template
          base_template = load_base_template()
          if not base_template:
              print("Warning: base.html not found, using simple HTML structure")
              base_template = """<!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>VB Healthcare</title>
              <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
              <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
          </head>
          <body>
          <!-- CONTENT_PLACEHOLDER -->
          <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
          </body>
          </html>"""
          
          # Convert all templates
          converted_count = 0
          
          if os.path.exists('templates'):
              for root, dirs, files in os.walk('templates'):
                  for file in files:
                      if file.endswith('.html') and file != 'base.html' and file != 'base_simple.html':
                          template_path = os.path.join(root, file)
                          
                          # Create meaningful output filename
                          relative_path = os.path.relpath(template_path, 'templates')
                          
                          if file == 'home.html':
                              output_file = 'index.html'
                          else:
                              # Convert subdirectory/filename.html to subdirectory-filename.html
                              output_file = relative_path.replace('/', '-').replace('\\', '-')
                          
                          output_path = os.path.join('docs', output_file)
                          
                          if convert_template_with_inheritance(template_path, output_path, base_template):
                              converted_count += 1
          
          print(f"\n🎉 Successfully converted {converted_count} templates to static HTML files!")
          
          # Create a simple index page if home.html doesn't exist
          if not os.path.exists('docs/index.html'):
              with open('docs/index.html', 'w') as f:
                  f.write('''<!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>VB Healthcare Management System</title>
              <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
              <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
          </head>
          <body>
              <div class="container mt-5">
                  <div class="text-center">
                      <h1><i class="fas fa-shield-alt text-primary"></i> VB Healthcare Management System</h1>
                      <p class="lead">Welcome to the Healthcare Management Demo</p>
                      <div class="row mt-4">
                          <div class="col-md-6 mb-3">
                              <div class="card">
                                  <div class="card-body">
                                      <h5 class="card-title"><i class="fas fa-user-injured"></i> Patient Portal</h5>
                                      <p class="card-text">Access patient dashboard and services</p>
                                      <a href="patients-dashboard.html" class="btn btn-primary">View Dashboard</a>
                                  </div>
                              </div>
                          </div>
                          <div class="col-md-6 mb-3">
                              <div class="card">
                                  <div class="card-body">
                                      <h5 class="card-title"><i class="fas fa-user-md"></i> Doctor Portal</h5>
                                      <p class="card-text">Access doctor dashboard and tools</p>
                                      <a href="doctors-dashboard.html" class="btn btn-success">View Dashboard</a>
                                  </div>
                              </div>
                          </div>
                      </div>
                  </div>
              </div>
          </body>
          </html>''')
              print("✓ Created default index.html")
          
          EOF
          
          # Add sample data to pages that need it (like dashboards)
          python3 << 'EOF'
          import os
          import re
          
          # Add sample appointment data to dashboard pages
          def add_sample_data_to_dashboards():
              dashboard_files = ['docs/patients-dashboard.html', 'docs/doctors-dashboard.html']
              
              sample_appointments_html = '''
              <tr>
                  <td>2025-09-25</td>
                  <td>10:00 AM</td>
                  <td>Dr. Sarah Smith</td>
                  <td><span class="badge bg-success">Confirmed</span></td>
                  <td>Consultation</td>
              </tr>
              <tr>
                  <td>2025-09-20</td>
                  <td>2:00 PM</td>
                  <td>Dr. Sarah Smith</td>
                  <td><span class="badge bg-info">Completed</span></td>
                  <td>Follow-up</td>
              </tr>
              <tr>
                  <td>2025-09-28</td>
                  <td>11:30 AM</td>
                  <td>Dr. Mike Johnson</td>
                  <td><span class="badge bg-warning">Pending</span></td>
                  <td>Check-up</td>
              </tr>
              '''
              
              for file_path in dashboard_files:
                  if os.path.exists(file_path):
                      with open(file_path, 'r', encoding='utf-8') as f:
                          content = f.read()
                      
                      # Add sample data where there are empty tables
                      if '<tbody>' in content and '</tbody>' in content:
                          content = re.sub(r'<tbody>\s*</tbody>', f'<tbody>{sample_appointments_html}</tbody>', content)
                          content = re.sub(r'<tbody>\s*<!-- [^>]+ -->\s*</tbody>', f'<tbody>{sample_appointments_html}</tbody>', content)
                      
                      with open(file_path, 'w', encoding='utf-8') as f:
                          f.write(content)
                      
                      print(f"✓ Added sample data to {file_path}")
              
          add_sample_data_to_dashboards()
          EOF
          
          # Create a README for the docs folder
          cat > docs/README.md << 'MDEOF'
          # VB Healthcare Management System - Static Demo
          
          This is a static version of the Healthcare Management System deployed on GitHub Pages.
          All Django templates have been converted to static HTML for demonstration purposes.
          
          ## Available Pages
          
          - **Home**: index.html - Main landing page
          - **Navigation**: navigation.html - Links to all pages
          - **Patient Dashboard**: patients-dashboard.html - Patient interface
          - **Doctor Dashboard**: doctors-dashboard.html - Doctor interface
          - **Appointments**: appointments.html - Appointment management
          - **Medical Records**: medical-records.html - Patient records
          - **About**: about.html - Company information
          
          All pages are accessible without authentication for demo purposes.
          
          ## Live Demo
          
          Visit: https://buthuruvenkatareddy.github.io/HealthCare_Patient_Management_System/
          
          © 2025 Venkat Buthuru. All rights reserved.
          MDEOF
          
          echo "Build completed! Static site ready in docs/ directory"
          echo "Files created:"
          ls -la docs/ | head -20
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4